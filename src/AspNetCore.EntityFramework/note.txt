 error :The instance of entity type 'Faction' cannot be tracked because another instance with the same key value for {'Id'} is already being tracked.
       When attaching existing entities, ensure that only one entity instance with a given key value is attached.
       Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.

- cách fix 1: lấy instance được quản lý bởi dbcontext ra rùi remove instance được lấy ra đó -> xem DeleteSuccess()
- cách fix 2: khi lấy instance ra thì thêm AsNoTracking() vào sau câu lệnh lấy instance để instance đó không được quản lý bởi dbcontext
- cách fix 3: là cấu hình _context.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking; -> khi cấu hình này thì câu lệnh lấy entity sẽ được áp dụng AsNoTracking -> thuòng thì áp dụng cho Find(id) hay FindAsync(id)
- cách fix 4: khi lấy instance ra thì sau đó gán instance đó làm detached -> _context.Entry(instance).State = EntityState.Detached;
- cách fix 5: là cáu hình .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking) -> khi cấu hình này thì mọi câu lệnh lấy entity đều được áp dụng AsNoTracking

**************************************************************************************************************************************************************************************
- khi instance được lấy ra từ dbcontext thì nó có state là Unchanged
- hoặc khi _context.Attach(instance); thì instance sẽ được đổi state là Unchanged -> f12 là rõ
- lưu ý: không thể có nhiều instance có cùng id được quản lý bởi dbcontext
- khi truyền new instance thì nó có state là Detached còn lấy ra từ dbcontext thì nó có state là Unchanged

- lưu ý: khi khi Attach hay Remove, Add, Update nó đều dùng hàm này để thay đổi state của instance:
    + SetEntityState(InternalEntityEntry entry, EntityState entityState) f12 vào bất kỳ hàm Attach hay Remove, Add, Update nào để xem
         - entry: là state của instance 
         - entityState: là state muốn đổi của instance
- trong hàm này nó check 2 trường hợp là instance có state là Detached hay không:
    1. nếu instance có state là Detached thì nó sẽ call hàm AttachGraph:
        + trong hàm AttachGraph này nó set state của instance thành entityState
        + và nếu instance có id thì nó check id instance có trùng với id instance được quản lý bởi dbcontext hay không và và nếu trùng thì quăng ra lỗi như error trên vì không thể có nhiều instance có cùng id được quản lý bởi dbcontext
        + nếu không có id trùng thì nó sẽ add instance vào dbcontext để quản lý, kể cả instance có id không có trên db thì nó vẫn add vào dbcontext để quản lý
        + nếu instance không có id như id = 0 hay id = null thì nó sẽ không check mà chỉ set identity cho id instance là có nghĩa nó set id mới cho instance và set state là "EntityState.Added" và sau đó add instance vào dbcontext để quản lý
        + khi mà entityState là Unchanged hay Modified,Add ,Deleted mà khi vào trường hợp instance không có id thì instance không có đổi sang state entityState mà state được đổi thành Added
    2. nếu instance không phải là Detached thì nó sẽ call hàm entry.SetEntityState:
        + hàm này chỉ set state của instance thành entityState chứ không có check như hàm AttachGraph.

**************************************************************************************************************************************************************************************
+ _context.Remove(instance):
   - hàm này đổi state của instance thành Deleted
   - trước tiên thì nó check instance có id hay không bằng hàm EntryWithoutDetectChanges(instance) -> nếu không có thì quăng ra lỗi
   - sau đó nó check instance đó có state là Detached hay không:
       1. nếu instance là Detached thì nó sẽ Attach instance thành Unchanged là nó call hàm SetEntityState(entry.GetInfrastructure(), EntityState.Unchanged) -> đọc ở trên để hiểu rõ SetEntityState
           + do instance là Detached thì nó sẽ call hàm AttachGraph (đọc ở trên để hiểu rõ AttachGraph) -> check id trùng hay không -> nếu không trùng thì add instance vào dbcontext để quản lý -> state lúc này  là Unchanged
           + sau đó nó sẽ đổi state của instance thành Deleted
       2. còn nếu instance không phải là Detached thì nó sẽ đổi state instance đó thành Deleted luôn
   - nếu lấy instance từ dbcontext ra sau đó đổi id thì khi remove instance đó thì nó báo lỗi id bị thay đổi
   - nếu remove new instance có id nhưng không có trên db thì nó vào AttachGraph và được thêm vào dbcontext để quản lý vì id nó không trùng với id instance nào được quản lý bởi dbcontext
   - và khi savechange() nó sẽ xóa new instance và sẽ bị lỗi do db không có id đó
   - còn nếu new instance có id mà trên db cũng có id đó thì khi savechange() nó sẽ xóa instance có id đó trên db -> chỉ khi nó id của new instance không trùng với id instance nào được quản lý bởi dbcontext

+ _context.Attach(instance):
   - trong hàm này thì nó call SetEntityState(entity, EntityState.Unchanged) -> đọc ở trên để hiểu rõ SetEntityState
   - hàm này đổi state của instance thành Unchanged
   - nếu instance là Detached thì nó sẽ call hàm AttachGraph (đọc ở trên để hiểu rõ AttachGraph) 
        -> check id trùng hay không -> nếu không trùng thì add instance vào dbcontext để quản lý và state là Unchanged
        -> nếu không có id thì nó set identity cho id instance và set state là "EntityState.Added" và sau đó add instance vào dbcontext để quản lý và state là Added
   - lưu ý: nếu truyèn new instance mà không có id vào Attach(instance) thì sẽ thêm instance đó vào dbcontext để quản lý và state là Added
   - và sau đó mà nếu savechange() thì nó add instance vào db

+ _context.Update(instance):
   - trong hàm này thì nó call SetEntityState(entity, EntityState.Modified); -> đọc ở trên để hiểu rõ SetEntityState
   - hàm này đổi state của instance thành Modified
   - nếu instance là Detached thì nó sẽ call hàm AttachGraph (đọc ở trên để hiểu rõ AttachGraph) 
        -> check id trùng hay không -> nếu không trùng thì add instance vào dbcontext để quản lý và state là Modified
        -> nếu không có id thì nó set identity cho id instance và set state là "EntityState.Added" và sau đó add instance vào dbcontext để quản lý và state là Added
   - lưu ý: nếu truyèn new instance mà không có id vào Update(instance) thì sẽ thêm instance đó vào dbcontext để quản lý và state là Added
   - và sau đó mà nếu savechange() thì nó add instance vào db chứ không phải update
   - lưu ý 2: nếu new instance có id nhưng không có trên db thì khi savechange() nó sẽ báo lỗi do không có id đó trên db

+ _context.Add(instance):
   - trong hàm này thì nó call SetEntityState(entity, EntityState.Added); -> đọc ở trên để hiểu rõ SetEntityState
   - hàm này đổi state của instance thành Added
   - nếu instance không phải Detached mà có id khác 0 hoặc null thì khi savechange() nó sẽ báo lỗi do không thể insert id vì IDENTITY_INSERT is set to OFF
   - nếu instance không phải Detached mà có id = 0 (lấy từ dbcontext rùi set id = 0) thì khi savechange() nó sẽ insert vào db -> thường thì làm cho chức năng duplicate
   - nếu instance là Detached thì nó sẽ call hàm AttachGraph (đọc ở trên để hiểu rõ AttachGraph) 
        -> nếu có id -> check id trùng hay không -> nếu không trùng thì add instance vào dbcontext để quản lý và khi savechange() sẽ bị lỗi do không thể insert id vì IDENTITY_INSERT is set to OFF
        -> nếu không có id ->  thì nó set identity cho id instance và set state là "EntityState.Added" và sau đó add instance vào dbcontext để quản lý và state là Added và khi savechange() sẽ insert vào db

**************************************************************************************************************************************************************************************

